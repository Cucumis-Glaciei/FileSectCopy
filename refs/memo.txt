memo

DeviceIoControl APIにコントロールコードFSCTL_GET_RETRIEVAL_POINTERSを渡すと、対象ファイルのクラスター断片の分布を表すバイト列が得られる。
これは、retrieval_pointers_buffer構造体のメモリ構造をそのまま反映したものである。
ただし、クラスター開始位置のセクタ番号は、ファイルシステム構造によって異なる。これは、DeviceIoControl APIにコントロールコードfsctl_get_retrieval_pointer_baseを渡すことで得られる。
クラスターとしての分布が得られるに過ぎないため、ディスク開始位置からのアドレスに変換するためにはディスククラスタサイズを取得する必要がある。
これはgetdiskfreespaceaによって得られる。
上記の内容は、fsutil file queryextentsを用いて取得することができるが、出力書式があまり機械可読ではない上に外部コマンドの呼び出しは遅いため、直にAPIを呼ぶのがよい。

なお、NTFS圧縮・暗号化が行われているファイルについては、通常とは異なる挙動を示すようである。
通常のファイル
file queryextents 'X:\nyan3_20200401_172VCN: 
0x0        クラスター: 0x5c       LCN: 0x44582

圧縮した場合：fsutil.exe file queryextents 'X:\nyan3_20200401_172834 - コピー.png'
VCN: 0x0        クラスター: 0xc        LCN: 0x3ef90
VCN: 0xc        クラスター: 0x4        LCN: 0xffffffffffffffff
VCN: 0x10       クラスター: 0x49       LCN: 0x3ef9c
VCN: 0x59       クラスター: 0x7        LCN: 0xffffffffffffffff

NTFS圧縮のアルゴリズムについては、Linuxのサイトが詳しい。
https://flatcap.github.io/linux-ntfs/ntfs/concepts/compression.html
https://www.forensicfocus.com/articles/shrinking-the-gap-carving-ntfs-compressed-files/

なお、専用のWindow APIも存在するようである。
https://docs.microsoft.com/en-us/windows/win32/fileio/file-compression-and-decompression

暗号化：
fsutil.exe file queryextents 'X:\nyan3_20200401_172834 - コピー (2).png'
VCN: 0x0        クラスター: 0x5c       LCN: 0x4069e
※通常と変わらないように見えるが、「ファイルのプロパティ」を確認すると「ディスク上のサイズ」が１クラスタ分だけ多い。しかしfsutilの結果には反映されない。


NTFSファイルシステムにおけるファイルの属性を取得には、次の構造体が関連している模様。ファイルが常駐(Resident)であるかどうかも判別できる？
https://docs.microsoft.com/ja-jp/windows/win32/devnotes/attribute-record-header

-------------------------------------------------------------------------------

FSCTL_GET_RETRIEVAL_POINTER_BASEについて

ボリュームのファイルハンドルが必要になるが、GENERIC_READを付与して取得しないとDeviceIoControlの呼び出しに失敗する。

FSCTL_GET_RETRIEVAL_POINTER_BASEを用いてDeviceIoControlを呼び出す場合、入力バッファは不要(ヌルポインタを渡し、サイズはゼロとする)。
出力バッファも、LARGE_INTEGER変数へのポインタとLARGE_INTEGERのサイズ(8)でよい。

テストしたところ、FAT12, FAT16, FAT32, exFAT, NTFS で成功する。
UDFではFSCTL_RETRIVAL_POINTERSまではうまくいくが、FSCTL_GET_RETRIEVAL_POINTER_BASEはなぜか失敗する。
フロッピーディスクのFAT12でも正しく動作するが、意味はあるだろうか？

PS D:\Documents\projects\FileSectCopy> .\x64\Debug\FileSectCopy.exe 'A:\ANTHEM.COD'
[FileClusterDistribution] Target File: A:\ANTHEM.COD
Drive Letter: A
[FileClusterDistribution] Obtained file handle of "A:\\ANTHEM.COD": 0000000000000098
Returned bytes of FSCTL_GET_RETRIEVAL_POINTERS: 32
Status of FSCTL_GET_RETRIEVAL_POINTERS: 1
Error Code of FSCTL_GET_RETRIEVAL_POINTERS: 0
01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Extent Count=1, Starting VCN=0
Next VCN=0x2 LCN=0
-------------------------------------------
Drive Letter: \\.\A:
180
Status ofDeviceIoControl: 1, Returned Bytes: 8, Retrieval Pointers Base: 33

-------------------------------------------------
ファイルが存在するボリュームの取得方法について
PathGetDriveNumber APIで取得できる。 shlwapi.h の読み込みが必要。専用のlibファイルもリンクする必要がある。#pragma comment( lib, "Shlwapi.lib" ) 

------------------------------------------------
ファイルサイズの取得
GetFileSizeEx APIを使用すればよい

-----------------------------------------------
ボリュームからのコピーについて
fstreamを使用すると、なぜかseekgで失敗する。このため、SetFilePointerEx APIでファイルポインタを操作してシークを行う必要がある。
下記を参照すること：
https://docs.microsoft.com/ja-jp/windows/win32/api/fileapi/nf-fileapi-setfilepointerex?redirectedfrom=MSDN
-> どうやらSetFilePointerEx, ReadFileを使用する場合も、ボリュームなどのデバイスファイルに対してはセクター境界に揃えないと失敗するらしい
https://stackoverflow.com/questions/31697229/readfile-function-returns-error-invalid-parameter

-----------------------------------------------
LPWSTRなどをメモリ安全に扱う方法としてはCStringTクラスを利用するのが良いようだ。
https://docs.microsoft.com/ja-jp/cpp/atl-mfc-shared/reference/cstringt-class?view=msvc-170
(LPCTSTR), (LPTSTR)などへキャストすることで自動的にTCHAR*ポインタを作成してくれる。またFormatなどの便利な関数が付属している。
変更される文字列ポインタとして渡す場合はGetBuffer()で一時的なバッファを用意してそのポインタを渡し、処理終了後にReleaseBuffer()で本体に反映させる必要がある。
http://e-s-s.jp/programlibrary/cstring%E2%87%92lptstr%E5%A4%89%E6%8F%9B/


-----------------------------------------------
NTFSマウントポイントを適切に処理する方法としては、以下の2つのAPIを併用するのがよさそうだ：
GetVolumePathNameW: https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getvolumepathnamew ファイルのパスをもとに、そのファイルが格納されているボリュームのマウントポイントをパス文字列として返してくれる。
GetVolumeNameForVolumeMountPointW: https://docs.microsoft.com/ja-JP/windows/win32/api/fileapi/nf-fileapi-getvolumenameforvolumemountpointw ドライブレターまたはNTFSマウントポイントパスをもとに、ボリュームのGUIDを返してくれる。
GUIDをもとに、ボリュームへの直接アクセスが可能になる。\\?\Volume{GUID} の形式でアクセスする。
